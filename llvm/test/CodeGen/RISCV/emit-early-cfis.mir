# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc %s -mtriple=riscv64 -riscv-enable-save-csr-in-ra=true \
# RUN: -run-pass=prologepilog -o - | FileCheck %s
---
name:            test0
tracksRegLiveness: true
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.0.entry:
    liveins: $x18
    ; CHECK-LABEL: name: test0
    ; CHECK: liveins: $x18
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $x2 = frame-setup ADDI $x2, -16
    ; CHECK-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-NEXT: BUNDLE implicit $x18 {
    ; CHECK-NEXT:   SD $x18, %stack.0, 0 :: (store (s64))
    ; CHECK-NEXT:   CFI_INSTRUCTION llvm_reg_at_scalable_offset_from_reg $x18, $x2, 0, 12
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE implicit-def $x18 {
    ; CHECK-NEXT:   $x18 = LD %stack.0, 0 :: (load (s64))
    ; CHECK-NEXT:   CFI_INSTRUCTION register $x18, $x18
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $x2 = frame-destroy ADDI $x2, 16
    ; CHECK-NEXT: frame-destroy CFI_INSTRUCTION def_cfa_offset 0
    ; CHECK-NEXT: PseudoRET
    SD $x18, %stack.0, 0 :: (store (s64))
    $x18 = LD %stack.0, 0 :: (load (s64))
    PseudoRET

...

---
name:            test1
tracksRegLiveness: true
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.0.entry:
    liveins: $x18
    ; CHECK-LABEL: name: test1
    ; CHECK: liveins: $x18
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $x2 = frame-setup ADDI $x2, -16
    ; CHECK-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-NEXT: BUNDLE implicit-def $x5, implicit $x18 {
    ; CHECK-NEXT:   $x5 = COPY $x18
    ; CHECK-NEXT:   CFI_INSTRUCTION register $x18, $x5
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE implicit-def $x18, implicit $x5 {
    ; CHECK-NEXT:   $x18 = COPY $x5
    ; CHECK-NEXT:   CFI_INSTRUCTION register $x18, $x18
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $x2 = frame-destroy ADDI $x2, 16
    ; CHECK-NEXT: frame-destroy CFI_INSTRUCTION def_cfa_offset 0
    ; CHECK-NEXT: PseudoRET
    $x5 = COPY $x18
    $x18 = COPY $x5
    PseudoRET

...

---
name:            test2
tracksRegLiveness: true
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.0.entry:
    liveins: $x18
    ; CHECK-LABEL: name: test2
    ; CHECK: liveins: $x18
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $x2 = frame-setup ADDI $x2, -16
    ; CHECK-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-NEXT: BUNDLE implicit-def $x5, implicit $x18 {
    ; CHECK-NEXT:   $x5 = COPY $x18
    ; CHECK-NEXT:   CFI_INSTRUCTION register $x18, $x5
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE implicit $x5 {
    ; CHECK-NEXT:   SD $x5, %stack.0, 0 :: (store (s64))
    ; CHECK-NEXT:   CFI_INSTRUCTION llvm_reg_at_scalable_offset_from_reg $x18, $x2, 0, 12
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE implicit-def $x5 {
    ; CHECK-NEXT:   $x5 = LD %stack.0, 0 :: (load (s64))
    ; CHECK-NEXT:   CFI_INSTRUCTION register $x18, $x5
    ; CHECK-NEXT: }
    ; CHECK-NEXT: BUNDLE implicit-def $x18, implicit $x5 {
    ; CHECK-NEXT:   $x18 = COPY $x5
    ; CHECK-NEXT:   CFI_INSTRUCTION register $x18, $x18
    ; CHECK-NEXT: }
    ; CHECK-NEXT: $x2 = frame-destroy ADDI $x2, 16
    ; CHECK-NEXT: frame-destroy CFI_INSTRUCTION def_cfa_offset 0
    ; CHECK-NEXT: PseudoRET
    $x5 = COPY $x18
    SD $x5, %stack.0, 0 :: (store (s64))
    $x5 = LD %stack.0, 0 :: (load (s64))
    $x18 = COPY $x5
    PseudoRET

...
